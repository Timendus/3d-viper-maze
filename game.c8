: main
  clear
	lores
	plane 3
	#show-map
  render-3d

: endlessloop
	jump endlessloop

#####################
# Render the map to the screen in pseudo-3D
# (for the actual gameplay)
: render-3d
  #jump render-hall-zero
  jump render-hall-one-right

: render-hall-zero
	v0 := 0
	v1 := 0
	i := hall-zero+0+0
	sprite v0 v1 0
	v1 := 16
  i := hall-zero+0+16
	sprite v0 v1 0
	v0 := 16
	v1 := 0
  i := hall-zero+16+0
	sprite v0 v1 0
	v1 := 16
  i := hall-zero+16+16
	sprite v0 v1 0
	v0 := 32
	v1 := 0
  i := hall-zero+32+0
	sprite v0 v1 0
	v1 := 16
  i := hall-zero+32+16
	sprite v0 v1 0
	v0 := 48
	v1 := 0
  i := hall-zero+48+0
	sprite v0 v1 0
	v1 := 16
  i := hall-zero+48+16
	sprite v0 v1 0
  return

: render-hall-one-right
  v0 := 0
  v1 := 0
  i := hall-zero+0+0
  sprite v0 v1 0
  v1 := 16
  i := hall-zero+0+16
  sprite v0 v1 0
  v0 := 16
  v1 := 0
  i := hall-zero+16+0
  sprite v0 v1 0
  v1 := 16
  i := hall-zero+16+16
  sprite v0 v1 0
  v0 := 32
  v1 := 0
  i := hall-zero+32+0
  sprite v0 v1 0
  v1 := 16
  i := hall-zero+32+16
  sprite v0 v1 0
  v0 := 48
  v1 := 0
  i := hall-one-right+48+0
  sprite v0 v1 0
  v1 := 16
  i := hall-one-right+48+16
  sprite v0 v1 0
  return

#####################
# Show the map with a blinking player position
# until player presses Q
: show-map
  render-map
: show-map-loop
  render-player
  v0 := 20
  wait
  jump show-map-loop

: render-player
  # Get player properties
  i := player
  load v2
  # Get coordinates in display space (x4)
  v0 <<= v0
  v0 <<= v0
  v1 <<= v1
  v1 <<= v1
  # Get pointer to right sprite (direction x 8)
  i := player-tile
  v2 <<= v2
  v2 <<= v2
  v2 <<= v2
  i += v2
  # Render
  sprite v0 v1 4
  return

: wait
  delay := v0
  loop
    check-keys
    v0 := OCTO_KEY_Q
    if v0 key then return
    v0 := delay
    if v0 == 0 then return
  again

#####################
# Render the map to the screen top down
# (as an in-game help and for debugging)
: render-map
  :alias X v2
	:alias Y v3
	X := 0
	Y := 0
: render-map-loop
	# Look up value at X,Y
	v0 := X
	v1 := Y
	map-get
	# Get pointer to right sprite
	# Sprites are 8 bytes, so sprite = tiles + map value * 4
	i := top-down-tiles
	v0 <<= v0
	v0 <<= v0
	v0 <<= v0
	i += v0
	# Get coordinates in display space (x4)
	v4 := X
	v4 <<= v4
	v4 <<= v4
	v5 := Y
	v5 <<= v5
	v5 <<= v5
	# Render
	sprite v4 v5 4
	X += 1
	if X < 16 then jump render-map-loop
	# Next row
	X := 0
	Y += 1
	if Y < 8 then jump render-map-loop
  # Done
	return

#####################
# Non-blocking key input check
# Updates the player data on input, checks for collisions
# Destroys v0 - v3
: check-keys
  i := player
  load v2

  # Rotation
  v0 := OCTO_KEY_A
  if v0 key then jump rotate-left
  v0 := OCTO_KEY_D
  if v0 key then jump rotate-right

  # Movement
  if v2 == 0 then jump going-up
  if v2 == 1 then jump going-right
  if v2 == 2 then jump going-down
  # Else fall through:

: going-left
  v0 := OCTO_KEY_W
  if v0 key then jump move-left
  v0 := OCTO_KEY_S
  if v0 key then jump move-right
  return
: going-up
  v0 := OCTO_KEY_W
  if v0 key then jump move-up
  v0 := OCTO_KEY_S
  if v0 key then jump move-down
  return
: going-right
  v0 := OCTO_KEY_W
  if v0 key then jump move-right
  v0 := OCTO_KEY_S
  if v0 key then jump move-left
  return
: going-down
  v0 := OCTO_KEY_W
  if v0 key then jump move-down
  v0 := OCTO_KEY_S
  if v0 key then jump move-up
  return

: rotate-left
  v0 := 3
  v2 -= 1
  v0 &= v2
  i := player-orientation
  save v0
  jump wait-release
: rotate-right
  v0 := 3
  v2 += 1
  v0 &= v2
  i := player-orientation
  save v0
  jump wait-release
: move-right
  i := player
  load v1
  v2 := 15
  v0 += 1
  v0 &= v2
  jump collide-or-save
: move-left
  i := player
  load v1
  v2 := 15
  v0 -= 1
  v0 &= v2
  jump collide-or-save
: move-up
  i := player
  load v1
  v2 := 7
  v1 -= 1
  v1 &= v2
  jump collide-or-save
: move-down
  i := player
  load v1
  v2 := 7
  v1 += 1
  v1 &= v2
  # Fall through

: collide-or-save
  # Backup position
  v2 := v0
  v3 := v1
  # Is there a wall at this position?
  map-get
  if v0 == 1 then jump wait-release
  # Otherwise, update position
  v0 := v2
  v1 := v3
  i := player
  save v1
  # Fall through

: wait-release
  v0 := OCTO_KEY_W
  if v0 key then jump wait-release
  v0 := OCTO_KEY_A
  if v0 key then jump wait-release
  v0 := OCTO_KEY_S
  if v0 key then jump wait-release
  v0 := OCTO_KEY_D
  if v0 key then jump wait-release
  return

#####################
# Query the map for the value at a given position
# Input: X in v0, Y in v1 (destructive)
# Output: map value in v0
: map-get
	i := map
	i += v0
	v1 <<= v1
	v1 <<= v1
	v1 <<= v1
	v1 <<= v1
	i += v1
	load v0
	return

: player
  2 1 # X, Y
: player-orientation
  1 # orientation

: map
  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
	1 2 0 0 1 1 0 0 0 0 0 0 1 0 0 1
	1 1 1 0 1 0 0 1 0 1 1 0 1 0 1 1
	1 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1
	1 1 0 1 1 0 0 1 1 1 0 1 1 0 0 1
	1 0 0 0 0 0 1 1 0 0 0 0 1 0 1 1
	1 1 0 1 1 0 0 0 0 1 0 1 1 0 3 1
	1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

: top-down-tiles

# empty
	0b11110000
	0b11110000
	0b11110000
	0b11110000

	0b00000000
	0b00000000
	0b00000000
	0b00000000

# wall
  0b00000000
  0b00000000
  0b00000000
  0b00000000

	0b01010000
	0b10100000
  0b01010000
	0b10100000

# player starting position
  0b11110000
  0b11010000
  0b11010000
  0b11110000

  0b00000000
  0b01100000
  0b01100000
  0b00000000

# finish
  0b11110000
	0b10010000
	0b11110000
	0b11110000

	0b11110000
	0b10010000
	0b11110000
	0b11110000

: player-tile

# Up
  0b00000000
  0b01100000
  0b00000000
  0b00000000

  0b00000000
  0b01100000
  0b01100000
  0b00000000

# Right
  0b00000000
  0b00100000
  0b00100000
  0b00000000

  0b00000000
  0b01100000
  0b01100000
  0b00000000

# Down
  0b00000000
  0b00000000
  0b01100000
  0b00000000

  0b00000000
  0b01100000
  0b01100000
  0b00000000

# Left
  0b00000000
  0b01000000
  0b01000000
  0b00000000

  0b00000000
  0b01100000
  0b01100000
  0b00000000


: hall-zero+0+0
  0xff 0xff 0xff 0xff 0xef 0xff 0xcf 0xff 0xce 0xff 0x8e 0xff 0xfc 0xdf 0xfc 0x9f 0xf7 0x9e 0xf7 0x76 0xe7 0x7e 0xc6 0x6d 0xfc 0x6d 0xef 0xeb 0xce 0xff 0xce 0xde
  0xc0 0x0 0x30 0x0 0x1c 0x0 0x3b 0x0 0x39 0xc0 0xf9 0xb0 0x7b 0xbc 0xf 0xf7 0xf 0xf5 0xc 0xfd 0x1c 0xcf 0xbd 0xdb 0x7f 0xdb 0x1b 0xff 0x39 0x9f 0x39 0xb5

: hall-zero+0+16
  0xcc 0xd4 0x88 0x9f 0xb 0xfd 0x7f 0x6d 0xf7 0x6b 0xf6 0x4e 0xe4 0x7e 0xc7 0xdc 0x8e 0xdf 0x7e 0x9c 0xec 0xb0 0xe8 0xc0 0xcb 0x0 0x8c 0x0 0xb0 0x0 0xc0 0x0
  0x3b 0xbf 0x7f 0xff 0xff 0xeb 0xfc 0xdb 0x8c 0xdf 0xd 0xff 0x1f 0xf5 0x3f 0xb7 0x7d 0xb7 0xf9 0xfc 0x9b 0xf0 0x1f 0xc0 0x3f 0x0 0x7c 0x0 0x70 0x0 0xc0 0x0

: hall-zero+16+0
  0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xdf 0xff 0x9b 0xff 0xfb 0xff 0x6f 0xbf 0xcb 0xaf 0xfb 0x5f
  0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xc0 0x0 0xb0 0x0 0xbc 0x0 0xf7 0x0 0x7e 0xc0 0xdf 0x70 0xfe 0xfc 0xf6 0xf7

: hall-zero+16+16
  0xdf 0xeb 0xf6 0xdc 0xf7 0xb0 0x7b 0xc0 0xdb 0x0 0xdc 0x0 0xb0 0x0 0xc0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0
  0xbd 0xbf 0xed 0xfc 0x5f 0x70 0xfe 0xc0 0xb7 0x0 0xbc 0x0 0xf0 0x0 0xc0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0

: hall-zero+32+0
  0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xfd 0xff 0xfb 0xff 0xc9 0xff 0x5f 0xfd 0xf6 0xfd 0x53 0xea 0xdf
  0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x3 0x0 0xd 0x0 0x3d 0x0 0xef 0x3 0x7e 0xe 0xfb 0x37 0x7f 0xff 0x6f

: hall-zero+32+16
  0xd5 0xbb 0x3b 0x6f 0xd 0xef 0x3 0xde 0x0 0xd9 0x0 0x3b 0x0 0xd 0x0 0x3 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0
  0xfd 0xbd 0x3f 0xb7 0xe 0xfa 0x3 0x7f 0x0 0xed 0x0 0x3d 0x0 0xf 0x0 0x3 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0

: hall-zero+48+0
  0xff 0xff 0xff 0xfc 0xff 0xf6 0xff 0xd3 0xff 0x73 0xfd 0x71 0xfb 0x3e 0xe9 0x3c 0x39 0xee 0x6e 0xaf 0x7a 0xe7 0x96 0x63 0xb6 0x3e 0xd7 0xd4 0xfd 0x52 0x7b 0x73
  0x0 0x3 0x0 0xc 0x0 0x38 0x0 0xdc 0x3 0x9c 0xd 0x9f 0x3d 0xde 0xef 0xf0 0xaf 0xf0 0xbf 0x30 0xf3 0x38 0xdb 0xbd 0xdb 0xfe 0xff 0xd8 0xf9 0x9c 0xad 0x9c

: hall-zero+48+16
  0x2b 0x33 0xf9 0x11 0x9f 0xd0 0xb2 0xbe 0xd6 0xed 0x72 0x6e 0x6e 0x27 0x39 0xe3 0xfb 0x31 0x39 0x5e 0xd 0x35 0x3 0x16 0x0 0xd3 0x0 0x31 0x0 0xd 0x0 0x3
  0xfd 0xdc 0xff 0xfe 0xd7 0xff 0xdb 0x3f 0xfb 0x31 0xff 0xb0 0xaf 0xf8 0xed 0xfc 0xed 0xbe 0x3f 0x9f 0xf 0xd9 0x3 0xf8 0x0 0xfc 0x0 0x3e 0x0 0xe 0x0 0x3


: hall-one-right+48+0
  0xff 0xff 0xff 0xff 0xff 0xff 0xff 0xe9 0xff 0x6f 0xfd 0x67 0xfb 0x23 0xe9 0x1f 0x39 0xf7 0x6e 0xaf 0x7a 0xed 0x96 0x64 0xb6 0x24 0xd7 0xdf 0xfd 0x7d 0x7b 0x6d
  0x0 0x0 0x0 0x0 0x0 0x3f 0x0 0xf1 0x3 0xb1 0xd 0xb9 0x3d 0xfd 0xef 0xdf 0xaf 0xe4 0xbf 0x34 0xf3 0x36 0xdb 0xbf 0xdb 0xff 0xff 0xdf 0xf9 0xa1 0xad 0xb1

: hall-one-right+48+16
  0x2b 0x2f 0xf9 0x27 0x9f 0xc3 0xb2 0xbf 0xd6 0xf7 0x72 0x6d 0x6e 0x2c 0x39 0xe4 0xfb 0x3f 0x39 0x73 0xd 0x3b 0x3 0x2e 0x0 0xe6 0x0 0x3f 0x0 0x0 0x0 0x0
  0xfd 0xf1 0xff 0xf9 0xd7 0xdd 0xdb 0x3f 0xfb 0x24 0xff 0xb6 0xaf 0xf7 0xed 0xff 0xed 0xbf 0x3f 0xa2 0xf 0xe2 0x3 0xf3 0x0 0xfb 0x0 0x3f 0x0 0x0 0x0 0x0
