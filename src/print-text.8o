#####################
# Text rendering routines
# `show-text` needs to be called again after 'text-delay' timer ticks.
#
# I'm not really happy with this code. It has dangerous loads (that don't
# explicitly reset `i`) and the sequential text stuff is a mess. But time is a
# limited resource, so we're moving on!

# Input: Address of a string 'unpacked' into v0 and v1
: select-text
  i := long current-text
  save v1
  v0 := 0
  i := long current-text-line
  save v0
  return

# Input: none
# Destroys: v0
: set-text-visible
  text-delay := 1
  v0 := 1
  jump set-text-visibility

# Input: none
# Destroys: v0
: set-text-invisible
  v0 := 0
: set-text-visibility
  i := long text-visible
  save v0
  return

# Destroys: v0 - v4
: show-text
  i := long text-visible
  load v0
  if v0 == 0 then return
  load-current-text
  load v1
  if v0 == sequential then jump sequential-text
  # Else it's blinking, fall through

: blinking-text
  plane 2
  v2 := 1
  v3 := 15 # X
  v4 := 26 # Y
: show-text-loop
  load-current-text
  v1 := v2
  draw-next-char
  v2 += 1
  if v0 != 0 then jump show-text-loop
  plane 3
  text-delay := 30
  return

: sequential-text
  # v1 == max line
  i := long current-text-line
  load v0
  # v0 == current line
  if v0 > v1 then jump text-done # Did we reach the end of the sequence?

  plane 2
  if v0 == 0 begin
    # Is this the first call in the sequence?
    #draw-current-text
    select-next-line
    jump text-done
  end
  if v0 == v1 begin
    # Is this the last call in the sequence?
    select-previous-line
    draw-current-text
    select-next-line
    select-next-line
    jump text-done
  end

  # Erase previous line, draw next line
  select-previous-line
  draw-current-text
  select-next-line
  draw-current-text
  select-next-line
  # Fall through

: text-done
  plane 3
  text-delay := 60
  return

: redraw-current-text
  # Is text visible now?
  i := long text-visible
  load v0
  if v0 == 0 then return
  # Did we reach the end of the sequence?
  load-current-text
  load v1
  i := long current-text-line
  load v0
  if v0 == v1 then return
  if v0 > v1 then return
  # Otherwise, draw the text
  plane 2
  draw-current-text
  select-next-line
  jump text-done

: draw-current-text
  v5 := 0
  v6 := 15 # X
  v7 := 26 # Y
: draw-current-text-loop
  load-current-text-line
  v1 := v5
  v3 := v6  # This is :(
  v4 := v7
  draw-next-char
  v6 := v3
  v5 += 1
  if v0 == 0 then return
  jump draw-current-text-loop

# Input:
#  * i points to string
#  * v1 points to character in string (index)
#  * coordinates in v3, v4
# Output: updates v3 to next position
# Destroys: v0
: draw-next-char
  i += v1
  load v0
  if v0 == 0 then return
  i := long font
  v0 <<= v0
  i += v0
  i += v0
  i += v0
  load v0   # WARNING: this affects i in unpredictable ways!
  sprite v3 v4 5
  v3 += v0
  return

# Input: none
# Output: i points to current text
# Destroys: v0, v1
: load-current-text
  i := long current-text
  load v1
  i := load-current-text-smc
  save v1
  0xF0 0x00  # i := long ...
: load-current-text-smc
  0 0
  return

# Input: none
# Output: i points to current text line
# Destroys: v0 - v4
: load-current-text-line
  i := long current-text-line
  load v0
  v2 := v0
  v3 := 0
  v4 := 2
  load-current-text
  i += v4
: load-current-text-line-loop1
  if v2 == v3 then return
: load-current-text-line-loop2
  load v0   # WARNING: this affects i in unpredictable ways!
  if v0 != 0 then jump load-current-text-line-loop2
  v3 += 1
  jump load-current-text-line-loop1

: select-previous-line
  i := long current-text-line
  load v0
  v0 -= 1
  i := long current-text-line
  save v0
  return

: select-next-line
  i := long current-text-line
  load v0
  v0 += 1
  i := long current-text-line
  save v0
  return
